let createServer,request,readFile,resolve,parse;_206‍.w("http",[["createServer",["createServer"],function(v){createServer=v}],["request",["request"],function(v){request=v}]]);_206‍.w("fs",[["readFile",["readFile"],function(v){readFile=v}]]);_206‍.w("path",[["resolve",["resolve"],function(v){resolve=v}]]);_206‍.w("querystring",[["parse",["parse"],function(v){parse=v}]]);




const server = createServer((request, response) => {
    switch(request.url){
        case "/status":{
            response.writeHead(200, {
                "Content-Type":"application/json",
            });
            response.write(
                JSON.stringify({
                    status: "Okay",
                })
            );
            response.end();
            break;
        }
        case "/sign-in":{
            const path = resolve(__dirname, "./pages/sign-in.html");
            readFile(path, (error, file) =>{
                if(error) {
                    response.writeHead(500, "Can't process HTML file.");
                    response.end();
                    return;
                }
                response.writeHead(200);
                response.write(file);
                response.end();
            });
            break;
        }
        case "/home":{
            const path = resolve(__dirname, "./pages/home.html");
            readFile(path, (error, file) =>{
                if(error) {
                    response.writeHead(500, "Can't process HTML file.");
                    response.end();
                    return;
                }
                response.writeHead(200);
                response.write(file);
                response.end();
            });
            break;
        }
        case "/authenticate":{
            let data = "";
            request.on("data", (chunk) => {
                data += chunk;
            });
            resquest.on("end",()=>{
                const params = parse(data);
                response.writeHead(301, {
                    Location: "/home",
                });
                response.end();
            });
            break;
        }
        default: {
            response.writeHead(404, "Service not found");
            response.end();
        }
    }
});

const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8000;
const HOSTNAME = process.env.HOSTNAME || "127.0.0.1";

server.listen(PORT, HOSTNAME, ()=>{
    console.log(`Server is listening at http://${HOSTNAME}:${PORT}.`);
});